blueprint:
  name: Airco HVAC control
  description: >
    # This blueprint is for using the air conditioner automatically.
    
    **Version: 0.4**
    
    *Streamlined Triggers: Combined above and below triggers for temperature into one.
    *Simplified Conditions: Reduced complexity in action conditions for better readability and maintainability.
    *Additional Safety Checks: Ensured the automation respects the specified start and stop times more clearly.

    Let me know what you think of this blueprint: https://github.com/Shiard/HA-Airco-HVAC-Control/tree/main
    Original v0.3: https://github.com/OoM-JaN/Airco-HVAC-control/tree/main
  domain: automation
  input:
    climate:
      name: Entities climate
      description: 'Select climate entities to be used.'
      selector:
        entity:
          domain: climate

    presence_home:
      name: Presence Home
      description: 'Select the group consisting of person.'
      default: group.presence_home_disabled
      selector:
        entity:
          domain: group

    set_temperature_climate:
      name: Set temperature climate
      default: 22
      description: 'Select the temperature to be set at climate.'
      selector:
        number:
          min: 15
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 0.5

    hvac_modes:
      name: HVAC modes
      description: 'Select the mode to be set to the air conditioner.'
      default: heat
      selector:
        select:
          options:
            - heat
            - cool
            - dry
            - fan_only

    fan_modes:
      name: Fan modes
      description: 'Select the ventilation speed to be set at the air conditioner.'
      default: auto
      selector:
        select:
          options:
            - auto
            - high
            - low
            - mid

    target_temperature_start:
      name: Target temperature start
      default: 18
      description: 'Set the minimum start temperature.'
      selector:
        number:
          min: 15
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 1

    target_temperature_stop:
      name: Target temperature stop
      default: 23
      description: 'Set the maximum temperature for shutdown.'
      selector:
        number:
          min: 15
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 1

    start_time:
      name: Start time
      default: "00:00:00"
      description: 'Set automatic operation start time.'
      selector:
        time:

    stop_time:
      name: Stop time
      default: "00:00:00"
      description: 'Set automatic operation end time.'
      selector:
        time:

    weekday_options:
      name: Weekdays
      description: 'Select the days of the week you would like the automation to run.'
      default:
        - mon
        - tue
        - wed
        - thu
        - fri
        - sat
        - sun
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

mode: parallel
variables:
  target_temperature_start: !input target_temperature_start
  climate: !input climate
  target_temperature_stop: !input target_temperature_stop
  presence_home: !input presence_home
  weekday_options: !input weekday_options

trigger:
  - platform: numeric_state
    entity_id: !input climate
    attribute: current_temperature
    above: !input target_temperature_start
    below: !input target_temperature_stop
    id: climate_trigger
  - platform: time
    at: !input start_time
    id: time_start
  - platform: time
    at: !input stop_time
    id: time_stop
  - platform: state
    entity_id: !input presence_home
    id: presence_trigger

condition:
  - condition: time
    weekday: !input weekday_options

action:
  - alias: Activate climate
    if:
      - "{{ is_state(climate, 'off') }}"
      - "{{ (trigger.id == 'climate_trigger' and states(climate) == 'off') or (trigger.id == 'time_start' and states(presence_home) == 'home') }}"
      - condition: time
        after: !input start_time
        before: !input stop_time
      - "{{ states(presence_home) == 'home' or presence_home == 'group.presence_home_disabled' }}"
    then:
      - service: climate.set_temperature
        data:
          entity_id: !input climate
          temperature: !input set_temperature_climate
          hvac_mode: !input hvac_modes
      - service: climate.set_fan_mode
        data:
          entity_id: !input climate
          fan_mode: !input fan_modes
  - alias: Disable climate
    if:
      - "{{ not is_state(climate, 'off') }}"
      - "{{ trigger.id == 'presence_trigger' and trigger.to_state.state == 'not_home' }}"
      - "{{ trigger.id == 'time_stop' }}"
      - "{{ state_attr(climate, 'current_temperature')|float(0) > target_temperature_stop|float(0) }}"
    then:
      - service: climate.turn_off
        target:
          entity_id: !input climate
